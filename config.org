#+TITLE: Emacs Config For Programming And Writing (ECFPAW)
#+AUTHOR: tusharhero
#+EMAIL: tusharhero@sdf.org
#+DESCRIPTION: It actually does more than just programming and writing.
#+STARTUP: content

* LICENSE NOTICE
  :PROPERTIES:
  :VISIBILITY: folded
  :END:
#+begin_src elisp
;; The GPLv3 License (GPLv3)

;; Copyright Â© 2023 Tushar Maharana

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+end_src
* IMPORTANT PROGRAMS TO LOAD FIRST
** Package Manager
I am going to use [[https://github.com/progfolio/elpaca][Elapaca]] package manager.
#+BEGIN_SRC elisp
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			:ref nil
			:files (:defaults (:exclude "extensions"))
			:build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
 (build (expand-file-name "elpaca/" elpaca-builds-directory))
 (order (cdr elpaca-order))
 (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	   ((zerop (call-process "git" nil buffer t "clone"
				 (plist-get order :repo) repo)))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (kill-buffer buffer)
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+END_SRC
***  use-package support.
#+begin_src elisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src
** Load Evil Mode
#+begin_src elisp
  (setq evil-want-C-u-scroll t) ;; fix C-u scrolling
    (use-package evil
      :init ;; tweak evil's configuration before loading it.
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-mode))
    (use-package evil-collection
      :after evil
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init))
    (use-package evil-tutor)
#+end_src

* GENERAL KEYBINDINGS
#+begin_src elisp
  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer ECFPAW/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    ;; direct convinient keybindings
    (ECFPAW/leader-keys
      "SPC" '(execute-extended-command :wk "Execute command")
      "TAB" '(mode-line-other-buffer :wk "Last buffer")
      "c" '(comment-line :wk "Comment lines")
      "'" '(vterm-toggle :wk "Toggle vterm")
      )

    ;; file related keybindings
    (ECFPAW/leader-keys
      "f" '(:ignore t :wk "files")
      "f f" '(find-file :wk "Find file")
      "f c" '((lambda () (interactive) (find-file (get-user-config-file-path "config.org"))) :wk "Edit emacs config")
      "f r" '(counsel-recentf :wk "Find recent files")
      "f e r" '((lambda () (interactive) (get-user-config-file-path "init.el")) :wk "Reload emacs config"))

    ;; dired related keybindings
    (ECFPAW/leader-keys
      "d" '(:ignore t :wk "Dired")
      "d d" '(dired :wk "Open dired")
      "d j" '(dired-jump :wk "Dired jump to current")
      "d p" '(peep-dired :wk "Peep-dired"))

    ;; buffer related keybindings
    (ECFPAW/leader-keys
      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b x" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Revert buffer")
      "b h" '((lambda () (interactive) (switch-to-buffer "*dashboard*")) :wk "dashboard buffer")
      "b s" '((lambda () (interactive) (switch-to-buffer "*scratch*")) :wk "scratch buffer")
      )

    ;; eval related keybindings
    (ECFPAW/leader-keys
      "e" '(:ignore t :wk "Evaluate")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")
      )

    ;; help keybindings
    (ECFPAW/leader-keys
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      )

    ;; toggle keybindings
    (ECFPAW/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t s" '(flyspell-mode :wk "Toggle flyspell(spellchecking)")
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))

    (ECFPAW/leader-keys
      "S" '(:ignore t :wk "Spell")
      "S s" '(ispell-word :wk "correct the word")
      "S t" '(flyspell-mode :wk "Toggle flyspell(spellchecking)"))

    ;; window management keybindings
    (ECFPAW/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w x" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      "w m" '(maximize-window :wk "Maximize window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window"))
    )

#+end_src

* ALL THE ICONS 
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+end_src

* DASHBOARD
#+begin_src elisp
  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner (get-user-config-file-path "images/trancendent-gnu.png"))
    (setq dashboard-banner-logo-title "ECFPAW")
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
                            (projects . 5)
                            (agenda . 5 )
                            (bookmarks . 3)))
    :config
    (dashboard-setup-startup-hook))
  #+end_src
* DIRED
#+begin_src emacs-lisp
  ;; disable overloading with info by default, shift+( to show details
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
  (use-package peep-dired
    :after dired
    :hook (evil-normalize-keymaps . peep-dired-hook)
    :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
     ;; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) 
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+end_src
* FONTS
** setting the fonts face
Defining the various fonts emacs will use.
#+begin_src elisp
  (set-face-attribute 'default nil
                      :font "FiraCode Nerd Font"
                      :height 130
                      :weight 'medium)
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)
  ;; Uncomment theh following line if line spacing needs adjusting.
  ;; (setq-default line-spacing 0.12)
#+end_src
** Zooming In/Out
For CTRL =/- zooming
#+begin_src elisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.

** Disable Menubar and Toolbars 
#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

** Disply Line Numbers and Truncated Lines
I like relative line numbers
#+begin_src elisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (global-visual-line-mode t)
#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode)
    )

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))

#+end_src

* ORG-MODE
** Enable spell checking by default
#+begin_src elisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+end_src
** Enable auto-fill mode by default 
#+begin_src elisp
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src
** Making the *scratch* buffer start in Org-mode
#+begin_src elisp
  (setq initial-major-mode 'org-mode)
#+end_src
** Enabling Org Bullets
Org-bullets look nice
#+begin_src elisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** Enabling org-tempo
This packages allows shortcuts for source blocks etc.
#+begin_src elisp
  (require 'org-tempo)
#+end_src
* FLYCHECK
#+begin_src elisp
  (use-package flycheck
  :ensure t
  :defer t
  :init (global-flycheck-mode))
#+end_src
* PROJECTILE 
Projectile is a project interaction library for Emacs.  It should be
noted that many projectile commands do not work if you have set âfishâ
as the âshell-file-nameâ for Emacs.  I had initially set âfishâ as the
âshell-file-nameâ in the Vterm section of this config, but oddly
enough I changed it to âbin/shâ and projectile now works as expected,
and Vterm still uses âfishâ because my default user âshâ on my Linux
system is âfishâ.
#+begin_src elisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src
* TRANSPARENCY
With Emacs version 29, true transparency has been added.  
#+begin_src elisp
(add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src
* WHICH-KEY 
#+begin_src elisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq
     which-key-side-window-location 'bottom
     which-key-sort-order #'which-key-key-order-alpha
     which-key-sort-uppercase-first nil
     which-key-add-column-padding 1
     which-key-max-display-columns nil
     which-key-min-display-lines 6
     which-key-side-window-slot -10
     which-key-side-window-max-height 0.25
     which-key-idle-delay 0.8
     which-key-max-description-length 25
     which-key-allow-imprecise-window-fit t
     which-key-separator " â " )
    )
#+end_src
* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
  (use-package sudo-edit
    :config
    (ECFPAW/leader-keys
     "f u" '(sudo-edit-find-file :wk "Sudo find file")
     "f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* SHELLS AND TERMINALS
** Vterm
 Vterm is a terminal emulator within Emacs.  The 'shell-file-name'
 setting sets the shell to be used in M-x shell, M-x term, M-x
 ansi-term and M-x vterm.
 #+begin_src emacs-lisp
   (use-package vterm
     :config
     (setq shell-file-name "/bin/sh"
           vterm-max-scrollback 5000))
 #+end_src
** Vterm-Toggle 
 [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.
 #+begin_src emacs-lisp
   (use-package vterm-toggle
     :after vterm
     :config
     (setq vterm-toggle-fullscreen-p nil)
     (setq vterm-toggle-scope 'project)
     (add-to-list 'display-buffer-alist
                  '((lambda (buffer-or-name _)
                      (let ((buffer (get-buffer buffer-or-name)))
                        (with-current-buffer buffer
                          (or (equal major-mode 'vterm-mode)
                              (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                    (display-buffer-reuse-window display-buffer-at-bottom)
                    ;;(display-buffer-reuse-window display-buffer-in-direction)
                    ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                    ;;(direction . bottom)
                    ;;(dedicated . t) ;dedicated is supported in emacs27
                    (reusable-frames . visible)
                    (window-height . 0.3))))
 #+end_src

* THEME
I will just use one of the doom themes for now.
#+begin_src elisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-city-lights t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-city-lights") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* CUSTOM
#+begin_src elisp
  ;; Get the path of file from user-config directory
  (defsubst get-user-config-file-path(file) (concat user-emacs-directory file))
#+end_src
