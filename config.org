#+TITLE: Emacs Config For Programming And Writing (ECFPAW)
#+AUTHOR: tusharhero
#+EMAIL: tusharhero@sdf.org
#+DESCRIPTION: It actually does more than just programming and writing.
#+STARTUP: overview
* LICENSE NOTICE
  :PROPERTIES:
  :VISIBILITY: folded
  :END:
#+begin_src elisp
;; The GPLv3 License (GPLv3)

;; Copyright © 2023 Tushar Maharana

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+end_src
* IMPORTANT PROGRAMS TO LOAD FIRST
** Package Manager
I am going to use [[https://github.com/progfolio/elpaca][Elapaca]] package manager. You might want to check for
the new installer version on their git repository.
#+BEGIN_SRC elisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+END_SRC
** use-package support.
[[https://jwiegley.github.io/use-package/][use-package]] is useful for configuring and installing packages.
#+begin_src elisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src
* SET LOCALE
This is will fix text glitches in vterm(see [[*SHELLS AND TERMINALS]]).
#+begin_src elisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
* CUSTOM
Just a place for some custom functions I define.
** Functions
#+begin_src elisp
  (defun ECFPAW/major-mode-keybinds ()
    "Map major mode keybindings to C-c"
    (interactive)
    (setq unread-command-events (listify-key-sequence (kbd "C-c"))))

  ;; Toggle between split windows and a single window
  (defun ECFPAW/toggle-windows-split()
    "Switch back and forth between one window and whatever split of
      windows we might have in the frame. The idea is to maximize the
      current buffer, while being able to go back to the previous split
      of windows in the frame simply by calling this command again."
    (interactive)
    (if (not(window-minibuffer-p (selected-window)))
        (progn
          (if (< 1 (count-windows))
              (progn
                (window-configuration-to-register ?u)
                (delete-other-windows))
            (jump-to-register ?u)))))

  (defun ECFPAW/make-cyclic-list (list)
    "Create a cyclic list"
    (when list
      (setf (cdr (last list)) list)))

  (defun ECFPAW/is-it-day ()
    "Return a boolean representation of whether its day or not. Any
    time between 7 and 18 is defined as day."
    (interactive)
    (< 7 (decoded-time-hour (decode-time (current-time))) 18))
#+end_src
* Load Evil Mode
Getting evil mode installed because, I was Vim user and I am most
comfortable in those keybindings.
** Some annoyances with evil
#+begin_src elisp
  (setq evil-want-C-u-scroll t) ;; fix C-u scrolling
  (setq evil-undo-system 'undo-redo) ;; fix undo redo system
#+end_src
** Actually load Evil
#+begin_src elisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
#+end_src
** Additional evil packages
*** Evil collection
#+begin_src elisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
*** Evil-tutor
#+begin_src elisp
  (use-package evil-tutor)
#+end_src
*** Evil-numbers
#+begin_src elisp
  (use-package evil-numbers :after evil)
#+end_src
** Fixing links follow
Evil binds these stuff to other stuff, so you need to disable it to be
able to follow links.
#+begin_src elisp
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))

  (setq org-return-follows-link  t)
#+end_src
** Tweak default Evil bindings
#+begin_src elisp
  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "{") 'forward-paragraph)
    (define-key evil-normal-state-map (kbd "}") 'backward-paragraph))
#+end_src
** Converting the caps key to an ESC key
Its very convenient to use the =capslock= key as an additional =ESC=
key.
*** Xorg
#+begin_src shell :tangle nil
  setxkbmap -option caps:escape
#+end_src
* DISABLE BELL
It's very annoying to have that bell ringing all the time.
#+begin_src elisp
(setq visible-bell t)
(setq ring-bell-function 'ignore)
#+end_src
* WHICH-KEY 
=which-key= basically shows the shortcuts you have setup. Its very
useful, because you may not which key you bonded to what.
#+begin_src elisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq
     which-key-side-window-location 'bottom
     which-key-sort-order #'which-key-key-order-alpha
     which-key-sort-uppercase-first nil
     which-key-add-column-padding 1
     which-key-max-display-columns nil
     which-key-min-display-lines 6
     which-key-side-window-slot -10
     which-key-side-window-max-height 0.25
     which-key-idle-delay 0.8
     which-key-max-description-length 25
     which-key-allow-imprecise-window-fit t
     which-key-separator " → " )
    )
#+end_src
* GENERAL KEYBINDINGS
I will use general package to create all the keybindings for ECFPAW. I
only make key binds for the stuff I really need(That goes for the
configuration in general as well).

I had to do add all these different headings to get support for
Imenu. But I also am inside a huge =use-package= call.
** Installation and basic config
#+begin_src elisp
  (use-package general
    :config
    (general-evil-setup)

    ;; set up ',' as major mode keybinds key
    (evil-define-key 'normal global-map (kbd ",") 'ECFPAW/major-mode-keybinds)

    ;; set up 'SPC' as the global leader key
    (general-create-definer ECFPAW/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode
#+end_src
** Direct convenient keybindings
#+begin_src elisp
    (ECFPAW/leader-keys
      "SPC" '(helm-M-x :wk "Execute command")
      "TAB" '(mode-line-other-buffer :wk "Last buffer")
      ;; "c" '(comment-or-uncomment-region :wk "Comment lines")
      "c" '(comment-dwim :wk "Comment lines")
      "'" '(vterm-toggle :wk "Toggle vterm")
      "a" '(evil-numbers/inc-at-pt :wk "Increment number")
      "A" '(evil-numbers/dec-at-pt :wk "Decrement number")
      "g" '(magit :wk "Magit")
      "." '(pulsar-pulse-line :wk "Pulse the current line"))
#+end_src
** Help
#+begin_src elisp
    (ECFPAW/leader-keys
      "h" '(:ignore t :wk "Help")
      "h h" '(help :wk "Help Help!")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable"))
#+end_src
** Buffer
#+begin_src elisp
  (ECFPAW/leader-keys
    "b" '(:ignore t :wk "buffer")
    "b B" '(helm-mini :wk "Switch buffer(global)")
    "b b" '(beframe-switch-buffer :wk "Switch buffer")
    "b i" '(ibuffer :wk "Ibuffer")
    "b d" '(kill-this-buffer :wk "Kill this buffer")
    "b x" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Revert buffer")
    "b f" '(olivetti-mode :wk "center text and write")
    "b h" '((lambda () (interactive) (switch-to-buffer "*dashboard*")) :wk "dashboard buffer")
    "b s" '((lambda () (interactive) (switch-to-buffer "*scratch*")) :wk "scratch buffer"))
#+end_src
** Window management
#+begin_src elisp
  ;; window management keybindings
  (ECFPAW/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w d" '(evil-window-delete :wk "Close window")
    "w x" '(evil-window-delete :wk "Close window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window") 
    "w /" '(evil-window-vsplit :wk "Vertical split window")
    "w m" '(ECFPAW/toggle-windows-split :wk "Maximize window")
    ;; Window motions
    "w h" '(windmove-left :wk "Window left")
    "w j" '(windmove-down :wk "Window down")
    "w k" '(windmove-up :wk "Window up")
    "w l" '(windmove-right :wk "Window right")
    "w w" '(other-window :wk "Goto next window"))
  ;; different keybindgings to resize windows.
  (global-set-key (kbd "<C-down>") 'shrink-window)  
  (global-set-key (kbd "<C-up>") 'enlarge-window)  
  (global-set-key (kbd "<C-right>") 'shrink-window-horizontally)  
  (global-set-key (kbd "<C-left>") 'enlarge-window-horizontally)  
 #+end_src
** File 
#+begin_src elisp
    (ECFPAW/leader-keys
      "f" '(:ignore t :wk "files")
      "f f" '(helm-find-files :wk "Find file")
      "f c" '((lambda () (interactive) (find-file (locate-user-emacs-file "config.org"))) :wk "Edit emacs config")
      "f r" '(recentf :wk "Find recent files")
      "f e r" '((lambda () (interactive) (load-file (locate-user-emacs-file "init.el")) (ignore (elpaca-process-queues)))
                :wk "Reload emacs config"))
#+end_src
** Dired 
#+begin_src elisp
    ;; dired related keybindings
    (ECFPAW/leader-keys
      "d" '(:ignore t :wk "Dired")
      "d d" '(dired :wk "Open dired")
      "d j" '(dired-jump :wk "Dired jump to current"))
#+end_src
** News-ticker
#+begin_src elisp
  (ECFPAW/leader-keys
    "N" '(:ignore t :wk "Newsticker")
    "N n" '(newsticker-treeview :wk "Treeview"))
#+end_src
** Spelling
#+begin_src elisp
    (ECFPAW/leader-keys
      "S" '(:ignore t :wk "Spelling")
      "S s" '(helm-flyspell-correct :wk "correct the word")
      "S t" '(flyspell-mode :wk "Toggle flyspell(spellchecking)"))
#+end_src
** Frame 
#+begin_src elisp
    (ECFPAW/leader-keys
      "F" '(:ignore t :wk "frame")
      "F t" '(ECFPAW/change-current-transparency-to :wk "change transparency"))
#+end_src
** Bookmarks
#+begin_src elisp
    (ECFPAW/leader-keys
      "B" '(:ignore t :wk "bookmark")
      "B s" '(bookmark-set :wk "bookmark set")
      "B l" '(bookmark-bmenu-list :wk "bookmark list"))
#+end_src
** Insert
#+begin_src elisp
  (ECFPAW/leader-keys
    "i" '(:ignore t :wk "insert")
    "i e" '(emoji-insert :wk "insert emoji")
    "i s" '(yas-insert-snippet :wk "insert snippet"))
#+end_src
** Eval
#+begin_src elisp
    (ECFPAW/leader-keys
      "e" '(:ignore t :wk "Evaluate")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region"))
#+end_src
** Toggling/Cycling
#+begin_src elisp
  (ECFPAW/leader-keys
    "t" '(:ignore t :wk "Toggle/Cycle")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t L" '(ECFPAW/cycle-line-number-type :wk "cycle line number types")
    "t s" '(flyspell-mode :wk "Toggle flyspell(spellchecking)")
    "t T" '(visual-line-mode :wk "Toggle truncated lines")
    "t c" '(outline-minor-mode :wk "enable code-folding")
    "t o" '(org-mode :wk "toggle org-mode")
    "t O" '(olivetti-mode :wk "center text and write")
    "t m" '(ECFPAW/mode-line/cycle-formats :wk "cycle mode line")
    "t t" '(ECFPAW/cycle-my-theme :wk "Cycle through my themes"))
#+end_src
** Org-mode
#+begin_src elisp
  (ECFPAW/leader-keys
    "o" '(:ignore t :wk "org-mode")
    "o o" '(org-mode :wk "toggle org-mode")
    "o r" '(:ignore t :wk "org-roam")
    "o p" '(org-toggle-latex-fragment :wk "toggle latex preview")
    "o i" '(:ignore :wk "insert")
    "o i d" '(ECFPAW/insert-now-timestamp :wk "time stamp")
    "o i i" '(org-download-clipboard :wk "image"))
  (evil-define-key 'normal org-mode-map (kbd "SPC o b") org-babel-map)
  (which-key-add-key-based-replacements "SPC o b" "babel")
#+end_src
*** Org-roam
#+begin_src elisp
    (ECFPAW/leader-keys
      "o r l" '(org-roam-buffer-toggle :wk "Buffer Toggle")
      "o r f" '(org-roam-node-find  :wk "Node find")
      "o r g" '(org-roam-graph  :wk "Graph")
      "o r i" '(org-roam-node-insert :wk "Node insert")
      "o r c" '(org-roam-capture :wk "Capture"))
#+end_src
** Programming
#+begin_src elisp
  (ECFPAW/leader-keys
    "p" '(:ignore t :wk "Programming")
    "p e" '(eglot :wk "Turn on eglot")
    "p d" '(eglot-shutdown :wk "shutdown a eglot workspace")
    "p r" '(eglot-rename :wk "eglot-rename")
    "p f" '(eglot-format-buffer :wk "format buffer")


    "p R" '(xref-find-references :wk "Find references")
    "p g" '(xref-find-definitions :wk "go to definitions")
    "p b" '(xref-go-back :wk "Go back to where you were")

    "p c" '(compile :wk "compile")
    "p d" '(eldoc :wk "get docs")
    "p i" '(helm-imenu :wk "imenu")
    "p a" '(eldoc :wk "eglot code actions")
    "p F" '(outline-minor-mode :wk "enable code-folding"))
#+end_src
** Narrowing
#+begin_src elisp
  (ECFPAW/leader-keys
    "n" '(:ignore t :wk "Narrowing")
    "n n" '(narrow-to-region :wk "Narrow to region")
    "n w" '(widen :wk "Widen"))
#+end_src
** LLM
#+begin_src elisp
  (ECFPAW/leader-keys
    "," '(:ignore t :wk "LLM")
    ", a" '(:ignore t :wk "Ask")
    ", a s" '(ellama-ask-selection :wk "selection")
    ", c" '(ellama-chat :wk "chat"))
#+end_src
** Last parens
Don't know of a way to get rid of this...
#+begin_src elisp
  )
#+end_src
* GRAPHICS
** ALL THE ICONS 
This is an icon set that can be used with dashboard, dired, ibuffer
and other Emacs programs.
  
BTW, you need to run =all-the-icons-install-fonts=.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** FONTS
*** setting the fonts face
Defining the various fonts Emacs will use.
#+begin_src elisp
  (add-to-list 'default-frame-alist
               '(font . "Iosevka NF 14"))
#+end_src
*** Zooming In/Out
For =CTRL=/-= zooming shortcuts.
#+begin_src elisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.

Mostly just disabling some Emacs features which are for beginners(mostly).
*** Disable Menu bar and Toolbars 
Just too distracting.
#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+end_src
*** Disable the scroll bar
Because they are totally unnecessary and I don't use them. Even if I
ever wanted to use my mouse, I would just use my mouse wheel instead
of this.
#+begin_src elisp
  (scroll-bar-mode -1)
#+end_src
*** Start in maximised mode
#+begin_src elisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
** Pulsar
=Pulsar= provides the sweet *pulsing* of light you see when you switch
you buffers, or go to a place in the buffer. It's super nice for
knowing where you are.

Evaluate this to get a pulse 😄.
#+begin_src elisp :tangle nil
(pulsar-pulse-line)
#+end_src

*** basic setup
#+begin_src elisp
  (use-package pulsar :config
    (setq pulsar-pulse t)
    (setq pulsar-delay 0.055)
    (setq pulsar-iterations 10)
    (setq pulsar-face 'pulsar-magenta)
    (setq pulsar-highlight-face 'pulsar-yellow)
    (add-hook 'next-error-hook #'pulsar-pulse-line)
    (add-hook 'evil-scroll-up #'pulsar-pulse-line)
    (add-hook 'minibuffer-setup-hook #'pulsar-pulse-line)

    ;; integration with the built-in `imenu':
    (add-hook 'imenu-after-jump-hook #'pulsar-recenter-top)
    (add-hook 'imenu-after-jump-hook #'pulsar-reveal-entry)
    (pulsar-global-mode 1))
#+end_src
*** Adding support for some more functions
#+begin_src elisp
  (with-eval-after-load 'pulsar
    (add-to-list 'pulsar-pulse-functions 'evil-scroll-down)
    (add-to-list 'pulsar-pulse-functions 'evil-scroll-up)
    (add-to-list 'pulsar-pulse-functions 'evil-scroll-line-to-center))
#+end_src
** THEME
I use Modus themes.
*** Extra Themes
I have disabled the loading of all these themes for now. Because I
don't use them.
**** Doom Themes
#+begin_src elisp :tangle nil
      (use-package doom-themes
        :ensure t
        :config
        ;; Global settings (defaults)
        (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
              doom-themes-enable-italic t) ; if nil, italics is universally disabled
        ;; Enable flashing mode-line on errors
        ;; (doom-themes-visual-bell-config)

        ;; Corrects (and improves) org-mode's native fontification.
        (doom-themes-org-config)


        (ECFPAW/cycle-my-theme))
#+end_src
**** VSCode theme
#+begin_src elisp :tangle nil
  (use-package vscode-dark-plus-theme
    :ensure t)
#+end_src
**** Catpuccin theme
#+begin_src elisp :tangle nil
(use-package catppuccin-theme :ensure t)
#+end_src
*** Easy cycling
I have a custom function for loading and cycling through my preferred themes.
#+begin_src elisp
  (defvar ECFPAW/themes (ECFPAW/make-cyclic-list '(modus-vivendi modus-operandi))
    "A list of the themes I like and use.")

  (defvar ECFPAW/current-theme nil
    "My current theme")

  (defun ECFPAW/cycle-my-theme ()
    "Cycle through a list of themes, ECFPAW/themes"
    (interactive)
    (disable-theme ECFPAW/current-theme) 
    (setq ECFPAW/current-theme (pop ECFPAW/themes))
    (load-theme ECFPAW/current-theme t))

  (ECFPAW/cycle-my-theme)
#+end_src
*** Day and night switching
This used to make theme switch to the light theme at day and the dark
theme at night. But I have disabled for now, since I don't really like
the light theme to be honest. If in the future I ever decide to use it
again, I will turn it one.
#+begin_src elisp :tangle nil
  (defvar ECFPAW/day-theme 'modus-operandi
    "Theme of choice for the day.")
  (defvar ECFPAW/night-theme 'modus-vivendi
    "Theme of choice for the night.")
  (defun ECFPAW/switch-theme-day-night ()
    (if (ECFPAW/is-it-day)
        (load-theme ECFPAW/day-theme)
        (load-theme ECFPAW/night-theme)))
  (run-at-time nil 3600 'ECFPAW/switch-theme-day-night)
#+end_src
** MODE-LINE
I am going to make my own mode-line, I followed [[https://protesilaos.com/codelog/2023-07-29-emacs-custom-modeline-tutorial/][Prot's tutorial]].
*** Mode-line formats
#+begin_src elisp
  (defvar ECFPAW/mode-line/full-format
      '("@ "
        ECFPAW/mode-line/title
        " "
        ECFPAW/mode-line/major-mode
        " "
        ECFPAW/mode-line/buffer-name
        " "
        (vc-mode vc-mode)
        " "
        "L%l"
        " "
        "%I"
        " "
        "%n"
        " "
        mode-line-misc-info
        " "
        ECFPAW/mode-line/jee-daily-countdown
        " "
        ECFPAW/mode-line/time
        " "
        mode-line-modes
        )
      "full mode line format, for when the mode-line has enough space."
      )


  (defvar ECFPAW/mode-line/mini-format
      '("@@"
        ECFPAW/mode-line/title
        " "
        ECFPAW/mode-line/major-mode
        " "
        ECFPAW/mode-line/buffer-name
        " "
        (vc-mode vc-mode)
        " "
        "L%l"
        " "
        "%I"
        " "
        "%n"
        " "
        mode-line-misc-info
        " "
        ECFPAW/mode-line/jee-daily-countdown
        " "
        ECFPAW/mode-line/time
        )
      "mini mode line format, for when the mode-line doesn't have enough space."
      )
  #+end_src
*** Mode-line constructs
#+begin_src elisp
  (defvar-local ECFPAW/mode-line/title
      '(:eval
        (propertize "ECFPAW" 'face 'modus-themes-tab-active))
    "Mode line construct to display ECFPAW.")
  (put 'ECFPAW/mode-line/title 'risky-local-variable t)

  (defvar-local ECFPAW/mode-line/jee-daily-countdown
      '(:eval
        (propertize (format "JEE mains: %i"
                            (days-between "Jan 01 2024" (current-time-string)))
                    'face 'modus-themes-intense-red))
    "Mode line construct to display the JEE daily countdown 💀")
  (put 'ECFPAW/mode-line/jee-daily-countdown 'risky-local-variable t)

  (defvar-local ECFPAW/mode-line/major-mode
      '(:eval 
        (propertize (capitalize (symbol-name major-mode)) 'face 'modus-themes-refine-blue))
    "Mode line construct to display the major mode.")
  (put 'ECFPAW/mode-line/major-mode 'risky-local-variable t)

  (defvar-local ECFPAW/mode-line/buffer-name
      '(:eval 
        (propertize (buffer-name) 'face 'modus-themes-nuanced-blue))
    "Mode line construct to display the buffer-name.")
  (put 'ECFPAW/mode-line/buffer-name 'risky-local-variable t)

  (defvar-local ECFPAW/mode-line/time
      '(:eval 
        (propertize (current-time-string) 'face 'modus-themes-special-calm))
    "Mode line construct to display the time")
  (put 'ECFPAW/mode-line/time 'risky-local-variable t)
#+end_src
*** Default mode-line, and cycling.
#+begin_src elisp
    (setq-default mode-line-format ECFPAW/mode-line/full-format)

    (defvar ECFPAW/mode-line/formats
      (ECFPAW/make-cyclic-list
       (list  ECFPAW/mode-line/full-format ECFPAW/mode-line/mini-format))
      "A list of all the modelines available")

    (defun ECFPAW/mode-line/cycle-formats ()
      "Cycle through line number types"
      (interactive)
      (setq ECFPAW/current-mode-line-format (pop ECFPAW/mode-line/formats))
      (setq mode-line-format ECFPAW/current-mode-line-format)
      (setq-default mode-line-format ECFPAW/current-mode-line-format)
      (setq-local mode-line-format ECFPAW/current-mode-line-format)
      (force-mode-line-update))
  #+end_src
*** Diminish modes
Hide some minor modes, and replace some with emojis™. 
#+begin_src elisp
  (use-package diminish
    :defer 3
    :config
    (diminish 'flycheck-mode "c✔ ")
    (diminish 'flyspell-mode "s✔ ")
    (diminish 'flymake-mode  "m✔ ")
    (diminish 'helm-mode)
    (diminish 'company-mode " 🗒️️")
    (diminish 'which-key-mode)
    (diminish 'company-box-mode)
    (diminish 'projectile-mode " 🗂️")
    (diminish 'org-indent-mode)
    (diminish 'evil-collection-unimpaired-mode)
    (diminish 'auto-fill-function " ✂")
    (diminish 'visual-line-mode " ✂")
    (diminish 'blacken-mode " ⚫")
    (diminish 'outline-minor-mode " 📍")
    (diminish 'eldoc-mode " 📜"))
#+end_src

** TRANSPARENCY
With Emacs version 29, true transparency has been added.
*** Setting initial transparency
#+begin_src elisp
  (add-to-list 'default-frame-alist '(alpha-background . 100)) ; For all new frames henceforth
#+end_src
*** Function to change the transparency of the current frame.
**** Xorg
I should be modifying =alpha-background= but that doesn't seem to be
going well. So I will modify =alpha= instead. =alpha-background= just
changes the background transparency, =alpha= on the other hand changes
the transparency of the entire buffer. For now the only way to get
background transparency is to modify the variable in the above
function and make a frame unfortunately. 

I use Wayland now. I will disable this.
#+begin_src elisp :tangle nil
  (defun ECFPAW/change-current-transparency-to (alpha-val)
    "Change the transparency to the given value"
    (interactive "nChange transparency: ")
    (set-frame-parameter (selected-frame) 'alpha alpha-val))
#+end_src
**** Wayland
This works only on Wayland, So disable it and enable the block above.
#+begin_src elisp
  (defun ECFPAW/change-current-transparency-to (alpha-val)
    "Change the transparency to the given value"
    (interactive "nChange transparency: ")
    (set-frame-parameter (selected-frame) 'alpha-background alpha-val))
#+end_src
* LINE NUMBERS
I am using this function because sometimes =absolute= line number is
better than =relative=. And I have decided to *NOT* enable these by
default because they are super distracting.
#+begin_src elisp
    (defvar ECFPAW/line-number-list
      (ECFPAW/make-cyclic-list (list 'relative 'absolute))
      "list of line numbers")

    (defun ECFPAW/cycle-line-number-type ()
      "Cycle through line number types"
      (interactive)
      (setq display-line-numbers (pop ECFPAW/line-number-list)))
#+end_src
* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for
"complete anything".  Completion will start automatically after you
type a few letters. Use M-n and M-p to select, <return> to complete or
<tab> to complete the common part.

#+begin_quote
Company was giving me troubles, removing all the customization, I
blindly copied from DistroTube worked. Lesson learned.
#+end_quote
#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :init
    (global-company-mode t))

  (use-package
    company-box
    :after company
    :hook (company-mode . company-box-mode))
#+end_src
* LLM-SUPPORT
I like to use Ollama on my local computer 😄. So to use this you need
to get a model running and tweak this block.
#+begin_src elisp
  (use-package ellama
    :init
    (setopt ellama-language "English")
    (require 'llm-ollama)

    (setopt ellama-provider
                    (make-llm-ollama
                     :chat-model "rationalAI:latest"))

    (setq ellama-assistant-nick "rationalAI"))
 #+end_src
* DASHBOARD
[[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]] is an package which allows you to make a nice little
dashboard which comes up when you start Emacs. I also disable the
number lines for this one because it looked ugly. I have disabled the custom
banner image for now as I feel like the default is cooler.
#+begin_src elisp
  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    ;; (setq dashboard-startup-banner (locate-user-emacs-file "images/trancendent-gnu.png"))
    (setq dashboard-banner-logo-title "ECFPAW")
    (setq dashboard-center-content t)
    (setq dashboard-projects-switch-function 'dired)
    (setq dashboard-projects-backend 'project-el)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-footer-messages '("Emacs Config For Programming And Writing(ECFPAW)"))
    :config
    (dashboard-setup-startup-hook))
#+end_src
* PROJECT
I was using projectile before but then I realized that I don't use
most of its functionality(Basically it was bloated for me). That is
why I have decided to switch to =project.el=, the builtin project
management functionality of Emacs.
#+begin_src elisp
  (use-package project
    :config
    (setq project-switch-commands 'project-find-dir))
#+end_src
* DIRED
Dired is a file manager within Emacs. It comes builtin. I am disabling
the display additional info by default because I get overwhelmed.
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+end_src
* BE-FRAMED
=BE-FRAME= divides all the buffers into different frames, basically
different sets of buffers for different frames, it helps avoids making
a big clutter (at least on surface).
#+begin_src elisp
  (use-package beframe :config (beframe-mode 1))
#+end_src
* HELM
[[https://emacs-helm.github.io/helm][helm]] is a completion mechanism. And I am in love with it. I plan to
use it everywhere its possible. I use it for flyspell as well.
#+begin_src emacs-lisp
  (use-package helm
    :demand t
    :config
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
    (helm-mode +1))

  (use-package helm-flyspell :after helm)
  (use-package helm-themes :after helm)
#+end_src
* EMOJI
Emojis, I need them. 😅
#+begin_src elisp
(use-package company-emoji :config 
  (add-to-list 'company-backends 'company-emoji))
#+end_src
* TEXT
Some stuff which are for text editing in general.
** Electric
*** Electric pairs
Adds the next pair for =(= automatically.
#+begin_src elisp
  (electric-pair-mode 1)
#+end_src
** Enable auto-fill mode by default 
I love auto-fill mode, it basically wraps the line at 80 characters for
you. So that the line is not too big and readable.
#+begin_src elisp
  (add-hook 'text-mode-hook 'auto-fill-mode)
#+end_src
** Prettify mode
*** enabling it globally
#+begin_src elisp
  (setq prettify-symbols-unprettify-at-point t)
  (global-prettify-symbols-mode)
#+end_src
*** Create symbol packs
#+begin_src elisp
  (defun ECFPAW/prettify-symbols-pack/belong-symbols ()
    (setq prettify-symbols-alist (append prettify-symbols-alist
                                         '(
                                           ("in"     . #x2208)
                                           ("not in" . #x2209)
                                           )
                                         ))
    )

  (defun ECFPAW/prettify-symbols-pack/in-equalities ()
    (setq prettify-symbols-alist (append prettify-symbols-alist
                                         '(
                                           ("<="     .  "≤" )
                                           (">="     .  "≥" )
                                           ("=="     .  "≟" )
                                           ("!="     .  "≠" )
                                           ("!="     .  "≠" )
                                           )
                                         ))
    )

  (defun ECFPAW/prettify-symbols-pack/asterik-to-multiplication ()
    (setq prettify-symbols-alist (append prettify-symbols-alist
                                         '(
                                           ("*"      .   "×")
                                           )
                                         ))
    )

  (defun ECFPAW/prettify-symbols-pack/lambda ()
    (setq prettify-symbols-alist (append prettify-symbols-alist
                                         '(
                                           ("lambda" .  955 )
                                           )
                                         ))
    )

  (defun ECFPAW/prettify-symbols-pack/function ()
    (setq prettify-symbols-alist (append prettify-symbols-alist
                                         '(
                                           ("def"    .  "𝒻")
                                           )
                                         ))
    )


  (defun ECFPAW/prettify-symbols-pack/pointers ()
    (setq prettify-symbols-alist (append prettify-symbols-alist
                                         '(
                                           ("->"     . "→ ")
                                           ("=>"     . "⇒ ")
                                           ("<-"     . "← ")
                                           )
                                         ))
    )

  (defun ECFPAW/prettify-symbols-pack/redirections ()
    (setq prettify-symbols-alist (append prettify-symbols-alist
                                         '(
                                           ("<<"     . "≪")
                                           (">>"     . "≫")
                                           ("<<"     . "≪")
                                           (">>"     . "≫")
                                           )
                                         ))
    )
#+end_src
** Enable narrow to region
#+begin_src elisp
  (put 'narrow-to-region 'disabled nil)
#+end_src
** For focused writing
#+begin_src elisp
  (use-package olivetti
    :config
    (setq-default olivetti-body-width 80))
#+end_src
* DOC-VIEW
I use Doc-View to view documents within Emacs.
#+begin_src elisp
  (custom-set-variables
   '(doc-view-continuous t))
#+end_src
* SNIPPETS
Snippets are very useful to quickly insert boilerplate.
#+begin_src elisp
  (use-package yasnippet :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets :after yasnippets)
#+end_src
* ORG-MODE
#+begin_quote
...
What is like the org-mode? What can make war against it?
...
#+end_quote
** Enable spell checking by default
#+begin_src elisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+end_src
** Inserting time and date
Here I will make a custom function which will help me insert time and date.
#+begin_src elisp
  (defun ECFPAW/insert-now-timestamp()
    "Insert org mode timestamp at point with current date and time."
    (interactive)
    (org-insert-time-stamp (current-time) t))
#+end_src
** Enabling Org Bullets
Org-bullets look nice.
#+begin_src elisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** Enabling org-tempo
This packages allows shortcuts for source blocks etc.
#+begin_src elisp
  (require 'org-tempo)
#+end_src
***  Fix Electric mode inhibiting tempo
#+begin_src elisp
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
** LaTeX preview
Org-mode can embed directly into the document. Here I am adjusting the
size and rendering method.
#+begin_src elisp
  (custom-set-variables '(org-format-latex-options
                          '(:foreground default :background default :scale 3 :html-foreground "Black" :html-background "Transparent" :html-scale 1 :matchers
                                        ("begin" "$1" "$" "$$" "\\(" "\\["))))
  (setq org-preview-latex-default-process 'imagemagick)
#+end_src
** Latex math support
#+begin_src elisp
  (use-package cdlatex)
  (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
  (defun ECFPAW/org-latex-yas ()
    "Activate org and LaTeX yas expansion in org-mode buffers."
    (yas-minor-mode)
    (yas-activate-extra-mode 'latex-mode))

  (add-hook 'org-mode-hook #'ECFPAW/org-latex-yas)
#+end_src
** Roam
I have disabled it for now.
#+begin_src elisp :tangle nil
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Documents/roam"))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (setq org-roam-completion-everywhere t)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

  (use-package org-roam-ui
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** Prettify mode symbols
I have separated this snippet because its a very special case.
#+begin_src elisp
  (add-hook 'org-mode-hook #'(lambda () (setq prettify-symbols-alist '(
                                                                       ("[ ]" . "☐  ")
                                                                       ("[-]" . "❍  ")
                                                                       ("[X]" . "☑  ")))))
#+end_src
** Babel
=Babel= allows you execute programming languages from within org-mode.
*** languages
Enable babel execution for Python too.
#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
#+end_src
** Org-Download
This extension allows drag and drop of images.
#+begin_src elisp
  (use-package org-download
    :config
    ;; Drag-and-drop to `dired`
    (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src
* NEWS-TICKER
=newsticker= is a feed reader for Emacs. 
** Loading feeds
To keep the feeds private, I have the feeds listed in a file called
=feeds.el=.
#+begin_src elisp
  (load-file
   (expand-file-name
    "feed.el"
    user-emacs-directory))
#+end_src
** Making eww the default
#+begin_src elisp
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src
* GIT
[[https://git-scm.com][Git]] is the best version control system(The only one I have ever
used). You can use it for anything BTW, not just programming. For
instance when writing stories, its convenient to have Git manage the
versions for you.
** MAGIT
Magit (Maggot , magic IDK) is a git client for Emacs.
#+begin_src elisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src
** PINENTRY
For getting support for GPG(GNU Privacy Guard).

#+begin_src elisp
  (use-package pinentry)
#+end_src

To use, add "allow-emacs-pinentry" to "~/.gnupg/gpg-agent.conf",
reload the configuration with "gpgconf --reload gpg-agent", and
start the server with M-x pinentry-start.

To enable gpgsigning for a repository, run this.
#+begin_src shell :tangle nil
  git config --local commit.gpgsign true
#+end_src
* FLYCHECK
Flycheck can do a lot of stuff including,
- Showing errors in programs,
- Showing spelling errors.
#+begin_src elisp
  (use-package flycheck
    :ensure t
    :defer t
    :init (global-flycheck-mode))
#+end_src
* PROGRAMMING
** Highlighting Indent Guides
Its helpful to keep track indentation. Since I am trying to reduce the
amount of indentation I do.
#+begin_src elisp
  (use-package highlight-indentation
    :config
    (setq highlight-indentation-set-offset 4))
#+end_src
** Breadcrumbs
Breadcrumbs are the little thingies at the top which show in which
part of the document you are in and in which directory.
#+begin_src elisp
  (use-package breadcrumb
    :elpaca (:host github :repo "joaotavora/breadcrumb")
    :config (breadcrumb-mode t))
#+end_src
** Direnv
You also have you install the =direnv= package on your operating
system. This package will manage all your environment needs. Its
pretty cool :).

For reference, using =direnv=, you can make a =.envrc= in your python
project directory and put the following in it. =layout python=. It
literally feels like black magic.

Also, you need to configure your shell for it to work. Since I use
=fish= shell, I had to add =direnv hook fish | source= to it.
#+begin_src elisp
  (use-package direnv :config (direnv-mode 1))
#+end_src
** Compilation mode
*** Enable colors 
#+begin_src elisp
  (add-hook 'compilation-filter-hook #'ansi-color-compilation-filter)
#+end_src
** Rainbow delimiters
This color codes =()= so that you never miss them.
#+begin_src elisp
  (use-package rainbow-delimiters
    :hook ((prog-mode . rainbow-delimiters-mode)))
#+end_src
** Rainbow mode
*Show the colors!*
#+begin_src elisp
(use-package rainbow-mode :config (add-hook 'prog-mode 'rainbow-mode))
#+end_src
** LANGUAGE MODES
**** Markdown mode
I still use markdown files for =README= and stuff, (sorry [[*ORG-MODE]]).
#+begin_src elisp
  (use-package markdown-mode
    :config
    (markdown-mode))
#+end_src
**** Python
***** Code formatting
Setting up black format on save!
#+begin_src elisp
  (use-package blacken :config (add-hook 'python-mode-hook 'blacken-mode))
#+end_src
***** Prettify mode symbols
#+begin_src elisp
  (add-hook 'python-mode-hook 'ECFPAW/prettify-symbols-pack/in-equalities)
  (add-hook 'python-mode-hook 'ECFPAW/prettify-symbols-pack/asterik-to-multiplication)
  (add-hook 'python-mode-hook 'ECFPAW/prettify-symbols-pack/lambda)
  (add-hook 'python-mode-hook 'ECFPAW/prettify-symbols-pack/pointers)
#+end_src
**** C
***** Prettify mode symbols
#+begin_src elisp
  (add-hook 'c-mode-hook 'ECFPAW/prettify-symbols-pack/in-equalities)
  (add-hook 'c-mode-hook 'ECFPAW/prettify-symbols-pack/pointers)
#+end_src
**** C++
***** Prettify mode symbols
#+begin_src elisp
    (add-hook 'c++-mode-hook 'ECFPAW/prettify-symbols-pack/in-equalities)
    (add-hook 'c++-mode-hook 'ECFPAW/prettify-symbols-pack/pointers)
    (add-hook 'c++-mode-hook 'ECFPAW/prettify-symbols-pack/redirections)
#+end_src
** Code Folding
#+begin_src elisp
  (add-hook 'prog-mode-hook 'outline-minor-mode)
#+end_src
** tree-sit
*** install language grammar
use this SRC block to install support for more languages (You can also
just call it using M-x)
#+begin_src elisp :tangle nil
  (treesit-install-language-grammar "python")
#+end_src
** Eglot
Get the latest version!
#+begin_src elisp
  (use-package eglot :ensure t)
#+end_src
* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or
switch over to editing with sudo privileges if we initially opened the
file without such privileges.

#+begin_src emacs-lisp
  (use-package sudo-edit
    :config
    (ECFPAW/leader-keys
     "f u" '(sudo-edit-find-file :wk "Sudo find file")
     "f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src
* SHELLS AND TERMINALS
You do need shell, in our editor sometimes...
** Vterm
 Vterm is a terminal emulator within Emacs.  The 'shell-file-name'
 setting sets the shell to be used in M-x shell, M-x term, M-x
 ansi-term and M-x vterm.
 #+begin_src emacs-lisp
   (use-package vterm
     :config
     (setq shell-file-name "/bin/sh"
           vterm-max-scrollback 5000))
 #+end_src
** Vterm-Toggle 
 [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.
 #+begin_src emacs-lisp
   (use-package vterm-toggle
     :after vterm
     :config
     (setq vterm-toggle-fullscreen-p nil)
     (setq vterm-toggle-scope 'project)
     (add-to-list 'display-buffer-alist
                  '((lambda (buffer-or-name _)
                      (let ((buffer (get-buffer buffer-or-name)))
                        (with-current-buffer buffer
                          (or (equal major-mode 'vterm-mode)
                              (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                    (display-buffer-reuse-window display-buffer-at-bottom)
                    ;; (display-buffer-reuse-window display-buffer-in-direction)
                    ;; display-buffer-in-direction/direction/dedicated is added in emacs27
                    ;; (direction . bottom)
                    ;; (dedicated . t) ;dedicated is supported in emacs27
                    (reusable-frames . visible)
                    (window-height . 0.3))))
 #+end_src
* TRAMP
=Tramp= allows you to remote into other machines from within Emacs.
#+begin_src elisp
  (custom-set-variables
   '(tramp-default-method "ssh")
   '(tramp-default-user "tusharhero"))
#+end_src
* EDIT SERVER
Edit server is an extensions which allows you edit text from your
browser in a very integrated way. Here is a [[https://github.com/stsquad/emacs_chrome][link]] to their git server.
#+begin_src elisp
  (use-package edit-server
    :ensure t
    :commands edit-server-start
    :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
    :config (setq edit-server-new-frame-alist
                  '((name . "Edit with Emacs FRAME")
                    (top . 200)
                    (left . 200)
                    (width . 80)
                    (height . 25)
                    (minibuffer . t)
                    (menu-bar-lines . t)
                    (window-system . x))))
#+end_src
