#+TITLE: Emacs Config For Programming And Writing (ECFPAW)
#+AUTHOR: tusharhero
#+EMAIL: tusharhero@sdf.org
#+DESCRIPTION: It actually does more than just programming and writing.
#+STARTUP: content
* IMPORTANT PROGRAMS TO LOAD FIRST
** Package Manager
I am going to use [[https://github.com/progfolio/elpaca][Elapaca]] package manager.
#+BEGIN_SRC elisp
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			:ref nil
			:files (:defaults (:exclude "extensions"))
			:build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
 (build (expand-file-name "elpaca/" elpaca-builds-directory))
 (order (cdr elpaca-order))
 (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	   ((zerop (call-process "git" nil buffer t "clone"
				 (plist-get order :repo) repo)))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (kill-buffer buffer)
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+END_SRC
***  use-package support.
#+begin_src elisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src
** Load Evil Mode
#+begin_src elisp
  (setq evil-want-C-u-scroll t) ;; fix C-u scrolling
    (use-package evil
      :init ;; tweak evil's configuration before loading it.
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-mode))
    (use-package evil-collection
      :after evil
      :config
      (setq evil-collection-mode-list '(dashboard dired ibuffer))
      (evil-collection-init))
    (use-package evil-tutor)
#+end_src

** General Keybindings
#+begin_src elisp
                  (use-package general
                  :config
                  (general-evil-setup t)

                  ;; set up 'SPC' as the global leader key
                  (general-create-definer ECFPAW/leader-keys
                  :states '(normal insert visual emacs)
                  :keymaps 'override
                  :prefix "SPC" ;; set leader
                  :global-refix "M-SPC") ;; access leader in insert mode

            ;; direct convinient keybindings
                (ECFPAW/leader-keys
                "SPC" '(execute-extended-command :wk "Execute command")
                "TAB" '(mode-line-other-buffer :wk "Last buffer")
                "c" '(comment-line :wk "Comment lines")
              )

            ;; file related keybindings
                (ECFPAW/leader-keys
                "f" '(:ignore t :wk "files")
                "f f" '(find-file :wk "Find file")
                "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
                "f r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config")
              )

            ;; buffer related keybindings
                (ECFPAW/leader-keys
                "b" '(:ignore t :wk "buffer")
                "b b" '(switch-to-buffer :wk "Switch buffer")
                "b i" '(ibuffer :wk "Ibuffer")
                "b x" '(kill-this-buffer :wk "Kill this buffer")
                "b n" '(next-buffer :wk "Next buffer")
                "b p" '(previous-buffer :wk "Previous buffer")
                "b r" '(revert-buffer :wk "Revert buffer")
                )

            ;; eval related keybindings
                (ECFPAW/leader-keys
                  "e" '(:ignore t :wk "Evaluate")    
                  "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
                  "e d" '(eval-defun :wk "Evaluate defun containing or after point")
                  "e e" '(eval-expression :wk "Evaluate and elisp expression")
                  "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
                  "e r" '(eval-region :wk "Evaluate elisp in region")
                 ))

#+end_src

* FONTS
Defining the various fonts emacs will use.
#+begin_src elisp
  (set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
  (set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)
  ;; Uncomment theh following line if line spacing needs adjusting.
  ;; (setq-default line-spacing 0.12)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's make GNU Emacs look a little better.

** Disable Menubar and Toolbars 
#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

** Disply Line Numbers and Truncated Lines
I like relative line numbers
#+begin_src elisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (global-visual-line-mode t)
#+end_src

* ORG-MODE
** Enabling Org Bullets
Org-bullets look nice
#+begin_src elisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
* WHICH-KEY 
#+begin_src elisp
  (use-package which-key
  :init
     (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit t
	which-key-separator " â†’ " ))
#+end_src
